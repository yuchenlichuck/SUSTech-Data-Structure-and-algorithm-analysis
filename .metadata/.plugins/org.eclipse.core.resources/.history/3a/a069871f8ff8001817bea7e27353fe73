package lab;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class Main7{
	class Node{
		int v;
		int weight;
		public Node(int v,int weight) {
			this.v=v;
			this.weight=weight;
		}
		public int getV() {
			return v;
		}
		public void setV(int v) {
			this.v = v;
		}
		public int getWeight() {
			return weight;
		}
		public void setWeight(int weight) {
			this.weight = weight;
		}
	}
	class Graph{
		int v;
		ArrayList<Node>[] list;
		//@SuppressWarnings("unchecked")
		public Graph(int v) {
			this.v=v;
			list=(ArrayList<Node>[])new ArrayList[v];
			for (int i = 0; i < v; i++) {
				list[i]=new ArrayList<>();
			}
		}
		public void addEdge(int u,int v,int weight) {
			list[u].add(new Node(v,weight));
		}
		public void topplpgical(int v,boolean[] visited,Stack<Integer>stack) {
			visited[v]=true;
			Stack<Integer> s=new Stack<>();
			s.push(v);
			while(!s.isEmpty()) {
				int vv=s.pop();
				for(Node node:list[vv]) {	
				if (!visited[node.getV()]) {
					s.push(node.getV());
					visited[node.getV()]=true;
				}
			}

				{stack.push(vv);
				System.out.print(vv+" ");
				}
			}
			stack.push(v);
			System.out.print(v+" ");
		}
		public int longestPath(int s) {
			Stack<Integer>stack=new Stack<>();
			int dist[]=new int[v];
			
			boolean[] visited=new boolean[v];
			for (int i = 0; i < v; i++) {
				if (!visited[i]) {
					topplpgical(i, visited, stack);
				}
			}			
				for (int i = 0; i < v; i++) {
					dist[i]=Integer.MIN_VALUE;
				}dist[s]=0;
				while (!stack.empty()) {
					int u=stack.pop();
				if(dist[u]!=Integer.MIN_VALUE)
					for (Node node:list[u]) {
						if(dist[node.getV()]<dist[u]+node.getWeight()) {
							dist[node.getV()]=dist[u]+node.getWeight();
						}
					}
			}
				
				int max=Integer.MIN_VALUE;
				for (int i = 0; i < v; i++) {
					if (dist[i]>max)
						max=dist[i];
				}
				return max;
		}
		
		
	}
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		int T=in.nextInt();
		for (int i = 0; i < T; i++) {
			int n=in.nextInt();
			int m=in.nextInt();
			Graph graph=new Main7().new Graph(n);
			for (int j = 0; j < n-1; j++) {
				graph.list[in.nextInt()-1].add(new Main7().new Node(in.nextInt()-1, in.nextInt()));
			}
			
		}
		
		
		
	}
}