import java.awt.event.WindowStateListener;
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeMap;

public class Maind{
	
	public class TreeNode{
		
		private int mData;
		private int mParent;
		private	HashMap<Integer,Integer> map=new HashMap<>();
		public TreeNode() {
			mData=0;
			mParent=0;

		}
		
		public TreeNode(int data,int parent)
		{
			mData=data;
			mParent=parent;
		}
		
		public HashMap<Integer, Integer> getMap() {
			return map;
		}

		public void setMap(HashMap<Integer, Integer> map) {
			this.map = map;
		}
		public void pushMap(int a,int b) {
			map.put(a, b);
		}
	}
	
	static void find(int cur,int sum,boolean[] vis,TreeNode[] node,int max,int root) {
		vis [cur]=true;
		if (node[cur].map.size()==1&&sum>max) {
			max=sum;
			root=cur;
		}
		for (Integer key: node[cur].map.keySet()) {
			if (!vis[key])
				find(key, sum+1, vis, node, max, root);
		}
		
	}
	
	public static void main(String[] args) {
		Scanner in =new Scanner(System.in);
		int T=in.nextInt();
		for(int i=0;i<T;i++) {
			int n=in.nextInt();
			TreeNode[] arrayTree=new TreeNode[n+1];
			TreeMap<Integer, Integer> smap=new TreeMap<>();
			
			for (int j = 0; j < n-1; j++) {
				int a=in.nextInt();
				int b=in.nextInt();
				arrayTree[a].pushMap(b, a);
				arrayTree[b].pushMap(a, b);
				int cur=1;
				int sum=0;
				int max=0;
				int root=1;
						
				boolean[] vis=new boolean[n+1];
				find(cur, sum, vis, arrayTree, max, root);
//				if (smap.containsKey(b)) {
//					int swap=b;
//					b=a;
//					a=swap;
//				}
//				smap.put(a, 1);
//				smap.put(b, 1);
//				
//				arrayTree[j].setParent(a);
//				arrayTree[j].setData(b);
			}

			
			
		}
	}
}
