package lab;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import java.util.Stack;

public class Main8{
    static	class Node{
		int v;
		public Node(int v) {
			this.v=v;
		}
		public int getV() {
			return v;
		}
	}
	static class Graph{
		int v;
		ArrayList<Node>[] list;
		public Graph(int v) {	
			this.v=v;
			list=(ArrayList<Node>[])new ArrayList[v];
			for (int i = 0; i < v; i++) {
				list[i]=new ArrayList<>();
			}
		}
		public void addEdge(int u,int v,int weight) {
			list[u].add(new Node(v));
		}
		static int[][] li;
		public void topplpgical(int v,boolean[] visited,int[][] li) {
			visited[v]=true;
			Stack<Integer> s=new Stack<>();
			s.push(v);
			int i=0;
			while(!s.isEmpty()) {
				int vv=s.peek();
				int sum=0;
				for(Node node:list[vv]) {	
					
				if (!visited[node.getV()]) {
					s.push(node.getV());
					visited[node.getV()]=true;
					li[node.getV()][0]=i++;
					break;
				}
				sum++;
				}

				if(sum==list[vv].size()) {
					li[s.pop()][1]=i++;
				}
			}
		}
		int ssq;
		public void longestPath(int n) {
			li=new int[n+10][2];
			boolean[] visited=new boolean[v];

					topplpgical(n,visited,li);
				
		
		}
		
	

		 static class Reader
	     {
	         final private int BUFFER_SIZE = 1 << 16;
	         private DataInputStream din;
	         private byte[] buffer;
	         private int bufferPointer, bytesRead;
	   
	         public Reader()
	         {
	             din = new DataInputStream(System.in);
	             buffer = new byte[BUFFER_SIZE];
	             bufferPointer = bytesRead = 0;
	         }
	   
	         public Reader(String file_name) throws IOException
	         {
	             din = new DataInputStream(new FileInputStream(file_name));
	             buffer = new byte[BUFFER_SIZE];
	             bufferPointer = bytesRead = 0;
	         }
	   
	         public String readLine() throws IOException
	         {
	             byte[] buf = new byte[64]; // line length
	             int cnt = 0, c;
	             while ((c = read()) != -1)
	             {
	                 if (c == '\n')
	                     break;
	                 buf[cnt++] = (byte) c;
	             }
	             return new String(buf, 0, cnt);
	         }
	   
	         public int nextInt() throws IOException
	         {
	             int ret = 0;
	             byte c = read();
	             while (c <= ' ')
	                 c = read();
	             boolean neg = (c == '-');
	             if (neg)
	                 c = read();
	             do
	             {
	                 ret = ret * 10 + c - '0';
	             }  while ((c = read()) >= '0' && c <= '9');
	   
	             if (neg)
	                 return -ret;
	             return ret;
	         }
	         public int nextByte() throws IOException
	         {
	             int ret = 0;
	             byte c = read();
	             while (c <= ' ')
	                 c = read();
	             boolean neg = (c == '-');
	             if (neg)
	                 c = read();
	             do
	             {
	                 ret = ret * 10 + c - '0';
	             }  while ((c = read()) >= '0' && c <= '9');
	   
	             if (neg)
	                 return -ret;
	             return ret;
	         }
	          
	         public long nextLong() throws IOException
	         {
	             long ret = 0;
	             byte c = read();
	             while (c <= ' ')
	                 c = read();
	             boolean neg = (c == '-');
	             if (neg)
	                 c = read();
	             do {
	                 ret = ret * 10 + c - '0';
	             }
	             while ((c = read()) >= '0' && c <= '9');
	             if (neg)
	                 return -ret;
	             return ret;
	         }
	   
	         public double nextDouble() throws IOException
	         {
	             double ret = 0, div = 1;
	             byte c = read();
	             while (c <= ' ')
	                 c = read();
	             boolean neg = (c == '-');
	             if (neg)
	                 c = read();
	   
	             do {
	                 ret = ret * 10 + c - '0';
	             }
	             while ((c = read()) >= '0' && c <= '9');
	   
	             if (c == '.')
	             {
	                 while ((c = read()) >= '0' && c <= '9')
	                 {
	                     ret += (c - '0') / (div *= 10);
	                 }
	             }
	   
	             if (neg)
	                 return -ret;
	             return ret;
	         }
	   
	         private void fillBuffer() throws IOException
	         {
	             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
	             if (bytesRead == -1)
	                 buffer[0] = -1;
	         }
	   
	         private byte read() throws IOException
	         {
	             if (bufferPointer == bytesRead)
	                 fillBuffer();
	             return buffer[bufferPointer++];
	         }
	   
	         public void close() throws IOException
	         {
	             if (din == null)
	                 return;
	             din.close();
	         }
	     }
  
	public static void main(String[] args) throws IOException {
		Reader in=new Reader();
		int T=in.nextInt();
		for (int i = 0; i < T; i++) {
			int n=in.nextInt();
			int m=in.nextInt();
			Graph graph=new Graph(n+3);
			
			
			HashMap<Integer, Integer> code=new HashMap<>();
			for (int j = 0; j < n-1; j++) {
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				graph.list[y].add(new Node(x));
				code.put(x, 1);
			}
				int sqb=0;
				for (int j = 0; j < n; j++) {
					if(!code.containsKey(j)) {
						graph.list[n].add(new Node(j));
					}
				}
				graph.longestPath(n);
			for (int j = 0; j < m; j++) {
				int x=in.nextInt()-1;
				int y=in.nextInt()-1;
				if(li[x][0]<li[y][0] && li[y][1]<li[x][1]) {
					System.out.println("No");
			}else {
				System.out.println("Yes");
			}
				}
		
		
		
	
}
	}
}