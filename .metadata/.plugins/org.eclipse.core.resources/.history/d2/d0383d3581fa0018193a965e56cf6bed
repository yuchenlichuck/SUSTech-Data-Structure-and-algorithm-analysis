package lab;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class Main8{
	class Node{
		int v;
		public Node(int v) {
			this.v=v;
		}
		public int getV() {
			return v;
		}
	}
	class Graph{
		int v;
		ArrayList<Node>[] list;
		public Graph(int v) {	
			this.v=v;
			list=(ArrayList<Node>[])new ArrayList[v];
			for (int i = 0; i < v; i++) {
				list[i]=new ArrayList<>();
			}
		}
		public void addEdge(int u,int v,int weight) {
			list[u].add(new Node(v));
		}
		public void topplpgical(int v,boolean[] visited,Stack<Integer>stack) {
			visited[v]=true;
			Stack<Integer> s=new Stack<>();
			s.push(v);
			while(!s.isEmpty()) {
				int vv=s.peek();
				int sum=0;
				for(Node node:list[vv]) {	
					
				if (!visited[node.getV()]) {
					s.push(node.getV());
					visited[node.getV()]=true;
					break;
				}
				sum++;
				}

				if(sum==list[vv].size()) {
					stack.push(s.pop());
				}
			}
		}
		int ssq;
		public Stack<Integer> longestPath() {
			Stack<Integer>stack=new Stack<>();
			ssq=0;
			boolean[] visited=new boolean[v];
			for (int i = 0; i < v; i++) {
				if (!visited[i]) {
					topplpgical(i, visited, stack);
					ssq++;
				}
			}			
			return stack;
		}
	
	public long maxmim(Stack<Integer> stack,int s) {
		long dist[]=new long[v];
		for (int i = 0; i < v; i++) {
		dist[i]=Integer.MIN_VALUE;
		}
		dist[s]=0;
		while (!stack.empty()) {
			int u=stack.pop();
		if(dist[u]!=Integer.MIN_VALUE)
			for (Node node:list[u]) {
				if(dist[node.getV()]<dist[u]+node.getWeight()) {
					dist[node.getV()]=dist[u]+node.getWeight();
				}
			}
	}
		
		long max=Integer.MIN_VALUE;
		for (int i = 0; i < v; i++) {
			if (dist[i]>max)
				max=dist[i];
		}
		return max;
	}
	}

  
	public static void main(String[] args) throws IOException {
		Scanner in=new Scanner(System.in);
		int T=in.nextInt();
		for (int i = 0; i < T; i++) {
			int n=in.nextInt();
			int m=in.nextInt();
			Graph graph=new Main8().new Graph(n+3);
			
			
			
			for (int j = 0; j < n-1; j++) {
				graph.list[in.nextInt()-1].add(new Main8().new Node(in.nextInt()-1));
			}

			Stack<Integer> stack=graph.longestPath();
		

			
			Stack<Integer> stack1=(Stack<Integer>)stack.clone();
			ArrayList<Integer> list=new ArrayList<>();
			for (int j = 0; j < ssq; j++) {
				graph.list[n].add(new Main8().new Node(stack1.pop()));
			}
			long max1=graph.maxmim(stack, n);
			
			System.out.println(max1);
		}
		
		
		
	}
}