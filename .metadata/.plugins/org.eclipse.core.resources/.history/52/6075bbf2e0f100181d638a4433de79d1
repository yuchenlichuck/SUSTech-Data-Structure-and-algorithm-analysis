import java.util.LinkedList;
import java.util.Scanner;

class node{
	int x;
	int s;
	node(int x,int s){
		this.x=x;
		this.s=s;
	}
}
public class Main3 {
	static int min=999999;
	static int[][] a;
	static int n,m,s;
	static boolean[] visited;

	public static void dfs(int cur,int dis) {
		if(dis > min) {
			return;
		}
		if(cur==s-1) {
			if(dis<min) {
				min=dis;
				return;
			}}
		for (int j = 0; j < n; j++) {
			if(a[cur][j]==1 && !visited[j]) {
				visited[j]=true;
				dfs(j,dis+a[cur][j]);
				visited[j]=false;
			}
		}
		return;
		
	}
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int T=in.nextInt();
        for (int i = 0; i < T; i++) {
            n=in.nextInt();
            m=in.nextInt();
            s=in.nextInt();
            a=new int[n][n];
            for (int j = 0; j < m; j++) {
                int x=in.nextInt();
                int y=in.nextInt();
                a[x-1][y-1]=1;
                a[y-1][x-1]=1;
            }
            int sum=0;
            int mark=-1;
            la :for (int j = 0; j <n ; j++) {
                    boolean[] visited=new boolean[n];
                    LinkedList<node> list=new LinkedList<>();
                    list.add(new node(j, 0));
                    while(!list.isEmpty())
                    {
                        int ope=list.peek().x;
                        for(int k=0;k<n;k++)
                            if(a[ope][k]==1 && !visited[k]) {
                                visited[k] = true;
                                sum=list.peek().s+1;
                                list.add(new node(k,sum));
                                mark=k;}
                                if(mark==s-1) {
                                	System.out.print(sum+" ");
                                	continue la;
                                }
                                list.pop();
                        }
                    System.out.print("-1 ");
                }
System.out.println();
            }
        
    }
}